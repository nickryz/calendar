(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// import "babel-polyfill";
window.addEventListener('DOMContentLoaded', init);

// import $ from 'jquery';

function init() {
    var Calendar = function () {
        function Calendar() {
            _classCallCheck(this, Calendar);

            // helpers variable
            this.year = new Date().getFullYear();
            this.month = new Date().getMonth();
            this.date = new Date().getDate();
            this.weekDays = ['MO', 'TU', 'WE', 'TH', 'FR', 'SA', 'SU'];
            this.currentNoteIndex = -1;
            this.currentSortStatus;

            // DOM
            this.mainLayout = document.querySelector('.main');
            this.calendarWrap = document.querySelector('.calendar-layout');
            this.calendarWeekDays = document.querySelector('.calendar-days');
            this.btnsMonth = document.querySelectorAll('.btn');
            this.dateName = document.querySelector('.date-name');
            this.monthName = document.querySelector('.month-name');
            this.yearName = document.querySelector('.year-name');
            this.btnAddNewNote = document.querySelector('.addNoteBtn');
            this.notesList = document.querySelector('.notes-list');

            // modal For Input NewNote
            this.modalForInputNewNote = document.querySelector('.modal-newNote');
            this.modalClose = document.querySelector('.cancel');
            // sort btns
            this.sortBtnsList = document.querySelector('.sort_btns-list');

            this._initCalendarLayout('day', 'day--active', 'day-tasksqty');
            this._initComponents(this.calendarWeekDays, 'dayWeek');
            this._addEl(this._formateDate());
            this._events();
        }

        _createClass(Calendar, [{
            key: '_events',
            value: function _events() {
                var _this = this;

                this.btnsMonth.forEach(function (el) {
                    el.addEventListener('click', _this._monthLayoutChange.bind(_this));
                });

                this.calendarWrap.addEventListener('click', this._changeDayInCalendar.bind(this));
                // modal For Input NewNote
                this.btnAddNewNote.addEventListener('click', this._btnAddNewNoteHandler.bind(this));
                this.modalForInputNewNote.querySelector('form').addEventListener('submit', this._getData.bind(this));
                this.modalClose.addEventListener('click', this._hideModalForInputNewNote.bind(this));
                // sort btns'
                this.sortBtnsList.addEventListener('click', this._changeSortStatus.bind(this));
                // Note items (card)
                this.notesList.addEventListener('click', this._itemBtnsHandler.bind(this));
            }
        }, {
            key: '_changeSortStatus',
            value: function _changeSortStatus(e) {
                if (e.target === e.currentTarget) return;
                var target = e.target.closest('a');
                this.currentSortStatus = target.getAttribute('href');
                e.currentTarget.querySelector('.sort_btns-link--active').classList.remove('sort_btns-link--active');
                target.classList.add('sort_btns-link--active');
                this._sort();
            }
        }, {
            key: '_sort',
            value: function _sort() {
                console.log(1);
                if (!this.currentSortStatus) return;
                var status = this.currentSortStatus.slice(1) || null;
                var sortList = this.notesList.querySelectorAll('li');
                sortList.forEach(function (el) {
                    el.style.display = 'none';
                    if (el.dataset.status !== status) {
                        el.style.display = '';
                    }
                });
            }
        }, {
            key: '_btnAddNewNoteHandler',
            value: function _btnAddNewNoteHandler(e) {
                this.modalForInputNewNote.style.display = 'block';
                this.mainLayout.style.filter = 'blur(3px)';
                this.modalForInputNewNote.querySelector('[name="date"]').value = this._formateDate();
            }
        }, {
            key: '_initCalendarLayout',
            value: function _initCalendarLayout(dayClass, dayActiveClass, taskQtyElClass) {
                var d = new Date(this.year, this.month);
                var daysInMonth = this._daysInMonth(this.year, this.month);
                var firstDayInMonth = d.getDay();
                for (var i = 0; i < daysInMonth; i++) {
                    var dayElem = document.createElement('LI');
                    this.date - 1 == i ? dayElem.classList.add(dayClass, dayActiveClass) : dayElem.classList.add(dayClass);
                    dayElem.dataset.date = i + 1;
                    dayElem.innerHTML = i + 1;
                    this.calendarWrap.appendChild(dayElem);
                    var taskQtyInDayEl = document.createElement('SPAN');
                    taskQtyInDayEl.classList.add(taskQtyElClass);
                    dayElem.appendChild(taskQtyInDayEl);
                }
                this.calendarWrap.firstChild.style.marginLeft = firstDayInMonth !== 0 ? 100 / 7 * (firstDayInMonth - 1) + '%' : 100 / 7 * 6 + '%';
                this.dateName.innerHTML = this.date;
                this.monthName.innerHTML = d.toLocaleString('en', { month: "long" });
                this.yearName.innerHTML = this.year;
                this._addTaskQtyInDateEl(taskQtyElClass);
            }
        }, {
            key: '_addTaskQtyInDateEl',
            value: function _addTaskQtyInDateEl(taskQtyElClass) {
                var _this2 = this;

                var taskQtyInDayEl = document.querySelectorAll('.' + taskQtyElClass);
                taskQtyInDayEl.forEach(function (el) {
                    var date = el.parentElement.dataset.date;
                    var elLength = _this2._getTaskQtyInDate(date);
                    if (elLength && elLength !== el.innerHTML) {
                        el.innerHTML = elLength;
                        el.style.display = 'inline';
                    } else {
                        el.style.display = null;
                    }
                });
            }
        }, {
            key: '_getTaskQtyInDate',
            value: function _getTaskQtyInDate(i) {
                var date = i < 10 ? '0' + i : i;
                var localStorage = this._localStorageRead(this._formateDate().slice(0, -2) + date);
                if (!localStorage || !localStorage.length) return;
                return localStorage.length;
            }
        }, {
            key: '_clearCalendarLayout',
            value: function _clearCalendarLayout() {
                while (this.calendarWrap.firstChild) {
                    this.calendarWrap.removeChild(this.calendarWrap.firstChild);
                }
            }
        }, {
            key: '_clearNotes',
            value: function _clearNotes() {
                this.notesList.querySelectorAll('li').forEach(function (el) {
                    el.remove();
                });
            }
        }, {
            key: '_changeDayInCalendar',
            value: function _changeDayInCalendar(e) {
                if (e.target === e.currentTarget) return;

                this._clearNotes();
                document.querySelector('.day--active').classList.remove('day--active');
                var target = e.target.closest('li');
                target.classList.add('day--active');
                var date = target.dataset.date;
                this.date = date.length == 1 ? '0' + date : date;
                this._addEl(this._formateDate());
                this._sort();
            }
        }, {
            key: '_initComponents',
            value: function _initComponents(weekDays, weekDaysClass) {
                this.weekDays.forEach(function (el) {
                    var day = document.createElement('LI');
                    day.innerHTML = el;
                    day.classList.add(weekDaysClass);
                    weekDays.appendChild(day);
                });
            }
        }, {
            key: '_daysInMonth',
            value: function _daysInMonth(year, month) {
                return new Date(year, month + 1, 0).getDate();
            }
        }, {
            key: '_monthLayoutChange',
            value: function _monthLayoutChange(e) {
                var target = e.target;
                var id = target.id;
                if (id === 'nextMonth') {
                    if (this.month === 11) {
                        this.month = 0;
                        this.year++;
                    } else {
                        this.date = 1;
                        this.month++;
                    }
                } else {
                    if (this.month === 0) {
                        this.month = 11;
                        this.year--;
                    } else {
                        this.date = 1;
                        this.month--;
                    }
                }
                this._clearNotes();
                this._clearCalendarLayout();
                this._initCalendarLayout('day', 'day--active', 'day-tasksqty');
                this._addEl(this._formateDate());
            }
        }, {
            key: '_addEl',
            value: function _addEl(itemKey) {
                var el = '<h3 class="item-title"></h3>\n                <p class="item-text"></p>\n                <p class="item-date"></p>\n                <div class="item-btns-block">\n                    <a href="#done" class="item-btn" title="\u041E\u0442\u043C\u0435\u0442\u0438\u0442\u044C \u043A\u0430\u043A \u0432\u044B\u043F\u043E\u043B\u043D\u0435\u043D\u043D\u043E\u0435">\n                        <i class="fas fa-check-circle"></i>\n                    </a>\t\n                    <a href="#edit" class="item-btn item-btn--edit" title="\u0412\u043D\u0435\u0441\u0442\u0438 \u043F\u0440\u0430\u0432\u043A\u0438">\n                        <i class="fas fa-pencil-alt"></i>\n                    </a>\t\n                    <a href="#remove" class="item-btn item-btn--remove" title="\u0423\u0434\u0430\u043B\u0438\u0442\u044C">\n                        <i class="fas fa-trash-alt"></i>\n                    </a>\t\n                </div>\n                ';
                var item = this._localStorageRead(itemKey) || 0;
                var currentListLength = document.querySelector('.notes-list').children.length;
                if (item.length === currentListLength) return;
                if (item.length - currentListLength > 0) {
                    for (var i = currentListLength; i < currentListLength + item.length - currentListLength; i++) {
                        var newLi = document.createElement('LI');
                        newLi.classList.add('notes-item');
                        newLi.innerHTML = el;
                        newLi.querySelector('.item-title').innerHTML = item[i].title;
                        newLi.querySelector('.item-text').innerHTML = item[i].note;
                        newLi.querySelector('.item-date').innerHTML = item[i].date;
                        if (item[i].done) {
                            newLi.dataset.status = 'done';
                            newLi.querySelector('[href="#done"]').classList.add('item-btn--done');
                            newLi.classList.add('notes-item--complete');
                        } else {
                            newLi.dataset.status = 'notdone';
                        }
                        document.querySelector('.notes-list').appendChild(newLi);
                    }
                }
                this._sort();
            }
        }, {
            key: '_changeEl',
            value: function _changeEl(itemKey) {
                var item = this._localStorageRead(itemKey)[this.currentNoteIndex];
                if (item) {
                    var li = document.querySelectorAll('.notes-item')[this.currentNoteIndex];
                    li.querySelector('.item-title').innerHTML = item.title;
                    li.querySelector('.item-text').innerHTML = item.note;
                    li.querySelector('.item-date').innerHTML = item.date;
                }
            }
        }, {
            key: '_getValues',
            value: function _getValues() {
                var title = this.modalForInputNewNote.querySelector('[name="title"]').value;
                var date = this.modalForInputNewNote.querySelector('[name="date"]').value;
                var note = this.modalForInputNewNote.querySelector('[name="note"]').value;
                return {
                    title: title,
                    date: date,
                    note: note,
                    done: false
                };
            }
        }, {
            key: '_getData',
            value: function _getData(e) {
                e.preventDefault();
                if (this.currentNoteIndex === -1) {
                    var data = this._getValues();
                    this._localStoragePush(data);
                } else if (this.currentNoteIndex >= 0) {
                    var _data = this._getValues();
                    var itemsArr = this._localStorageRead(_data.date);
                    if (!itemsArr || _data.date !== this._formateDate()) {
                        this._localStoragePush(_data);
                        this._localStorageRemove(this.currentNoteIndex);
                        document.querySelectorAll('.notes-item')[this.currentNoteIndex].remove();
                    } else if (_data.date == this._formateDate()) {
                        var currentArr = this._localStorageRead(_data.date);
                        currentArr[this.currentNoteIndex] = _data;
                        this._localStorageChange(currentArr);
                        this._changeEl(_data.date);
                    }
                    this.currentNoteIndex = -1;
                }
                this._hideModalForInputNewNote();
                this._addTaskQtyInDateEl('day-tasksqty');
            }
        }, {
            key: '_hideModalForInputNewNote',
            value: function _hideModalForInputNewNote() {
                this.modalForInputNewNote.querySelectorAll('[name]').forEach(function (el) {
                    el.value = '';
                });
                this.modalForInputNewNote.style.display = null;
                this.mainLayout.style.filter = null;
            }
        }, {
            key: '_itemBtnsHandler',
            value: function _itemBtnsHandler(e) {
                e.preventDefault();
                var noteItemIndex = this._findIndexElInList(e.target.closest("LI"));
                var target = e.target.closest('a.item-btn');
                if (!target) return;

                var id = target.getAttribute('href');
                switch (id) {
                    case '#done':
                        var itemsArr = this._localStorageRead(this._formateDate());
                        var targetItem = itemsArr[noteItemIndex];
                        targetItem.done = !targetItem.done;
                        this._localStorageChange(itemsArr);
                        target.classList.toggle('item-btn--done');
                        var parent = target.closest('LI');
                        parent.classList.toggle('notes-item--complete');
                        parent.dataset.status = parent.dataset.status === 'done' ? 'notdone' : 'done';
                        this._sort();
                        break;
                    case '#remove':
                        this._localStorageRemove(noteItemIndex);
                        target.closest('LI').remove();
                        this._addTaskQtyInDateEl('day-tasksqty');
                        break;
                    case '#edit':
                        this.modalForInputNewNote.style.display = 'block';
                        this.mainLayout.style.filter = 'blur(3px)';
                        var itemData = this._localStorageRead(this._formateDate())[noteItemIndex];
                        this.modalForInputNewNote.querySelector('[name="title"]').value = itemData.title;
                        this.modalForInputNewNote.querySelector('[name="date"]').value = itemData.date;
                        this.modalForInputNewNote.querySelector('[name="note"]').value = itemData.note;
                        this.currentNoteIndex = noteItemIndex;
                        break;
                }
            }
        }, {
            key: '_localStoragePush',
            value: function _localStoragePush(noteData) {
                var itemsArr = localStorage.getItem(noteData.date) ? JSON.parse(localStorage.getItem(noteData.date)) : [];
                itemsArr.push(noteData);
                var itemsArrJson = JSON.stringify(itemsArr);
                localStorage.setItem(noteData.date, itemsArrJson);

                var nameFormateDate = this._formateDate();

                if (noteData.date == nameFormateDate) {
                    this._addEl(noteData.date);
                }
            }
        }, {
            key: '_localStorageChange',
            value: function _localStorageChange(itemsArr) {
                var itemsArrJson = JSON.stringify(itemsArr);
                localStorage.setItem(this._formateDate(), itemsArrJson);
            }
        }, {
            key: '_localStorageRead',
            value: function _localStorageRead(date) {
                if (date) {
                    var item = JSON.parse(localStorage.getItem(date));
                    return item;
                } else {
                    return window.localStorage;
                }
            }
        }, {
            key: '_localStorageRemove',
            value: function _localStorageRemove(index) {
                var date = this._formateDate();
                var itemsArr = this._localStorageRead(date);
                itemsArr.splice(index, 1);
                var itemsArrJson = JSON.stringify(itemsArr);
                localStorage.setItem(date, itemsArrJson);
            }
        }, {
            key: '_formateDate',
            value: function _formateDate() {
                var monthNameFormate = String(this.month).length === 1 ? '0' + (this.month + 1) : this.month + 1;
                var dateNameFormate = String(this.date).length === 1 ? '0' + this.date : this.date;
                return String(this.year + '-' + monthNameFormate + '-' + dateNameFormate);
            }
        }, {
            key: '_findIndexElInList',
            value: function _findIndexElInList(item) {
                var parentEl = item.parentElement.children;
                var itemsArr = [].slice.call(parentEl);
                var count = -1;
                var currentItem = item;
                while (currentItem) {
                    currentItem = currentItem.previousElementSibling;
                    count++;
                }
                return count;
            }
        }]);

        return Calendar;
    }();

    var newCalendar = new Calendar();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
