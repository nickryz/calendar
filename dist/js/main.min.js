(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// import "babel-polyfill";
window.addEventListener('DOMContentLoaded', init);

// import $ from 'jquery';

function init() {
    var Calendar = function () {
        function Calendar() {
            _classCallCheck(this, Calendar);

            // helpers variable
            this.year = new Date().getFullYear();
            this.month = new Date().getMonth();
            this.date = new Date().getDate();
            this.weekDays = ['ПН', 'ВТ', 'СР', 'ЧТ', 'ПТ', 'СБ', 'ВС'];

            // DOM
            this.mainLayout = document.querySelector('.main');
            this.calendarWrap = document.querySelector('.calendar-layout');
            this.calendarWeekDays = document.querySelector('.calendar-days');
            this.btnsMonth = document.querySelectorAll('.btn');
            this.monthName = document.querySelector('.month-name');
            this.yearName = document.querySelector('.year-name');
            this.btnAddNewNote = document.querySelector('.addNoteBtn');
            this.notesList = document.querySelector('.notes-list');

            // modal For Input NewNote
            this.modalForInputNewNote = document.querySelector('.modal-newNote');
            this.modalClose = document.querySelector('.cancel');

            this._initCalendarLayout('day', 'day--bingo');
            this._initComponents(this.calendarWeekDays, 'dayWeek');
            this._addEl(this._formateDate());
            this._events();
        }

        _createClass(Calendar, [{
            key: '_events',
            value: function _events() {
                var _this = this;

                this.btnsMonth.forEach(function (el) {
                    el.addEventListener('click', _this._monthLayoutChange.bind(_this));
                });

                // modal For Input NewNote
                this.btnAddNewNote.addEventListener('click', function (e) {
                    _this.modalForInputNewNote.style.display = 'block';
                    _this.mainLayout.style.filter = 'blur(3px)';
                });
                this.modalForInputNewNote.querySelector('form').addEventListener('submit', this._getData.bind(this));
                this.modalClose.addEventListener('click', function () {
                    _this.modalForInputNewNote.style.display = null;
                    _this.mainLayout.style.filter = null;
                });

                this.notesList.addEventListener('click', this._itemBtnsHandler.bind(this));
            }
        }, {
            key: '_initCalendarLayout',
            value: function _initCalendarLayout(dayClass, dayActiveClass) {
                var d = new Date(this.year, this.month);
                var daysInMonth = this._daysInMonth(this.year, this.month);
                var firstDayInMonth = d.getDay();

                for (var i = 0; i < daysInMonth; i++) {
                    var dayElem = document.createElement('LI');
                    dayElem.classList.add(dayClass);
                    dayElem.classList.add(dayActiveClass);
                    dayElem.innerHTML = i + 1;
                    if (i === 1) {}
                    this.calendarWrap.appendChild(dayElem);
                }
                this.calendarWrap.firstChild.style.marginLeft = firstDayInMonth !== 0 ? 100 / 7 * (firstDayInMonth - 1) + '%' : 100 / 7 * 6 + '%';
                this.monthName.innerHTML = d.toLocaleString('ru', { month: "long" });
                this.yearName.innerHTML = d.getFullYear();
            }
        }, {
            key: '_clearCalendarLayout',
            value: function _clearCalendarLayout() {
                while (this.calendarWrap.firstChild) {
                    this.calendarWrap.removeChild(this.calendarWrap.firstChild);
                }
            }
        }, {
            key: '_initComponents',
            value: function _initComponents(weekDays, weekDaysClass) {
                this.weekDays.forEach(function (el) {
                    var day = document.createElement('LI');
                    day.innerHTML = el;
                    day.classList.add(weekDaysClass);
                    weekDays.appendChild(day);
                });
            }
        }, {
            key: '_daysInMonth',
            value: function _daysInMonth(year, month) {
                return new Date(year, month + 1, 0).getDate();
            }
        }, {
            key: '_monthLayoutChange',
            value: function _monthLayoutChange(e) {
                var target = e.target;
                var id = target.id;
                if (id === 'nextMonth') {
                    if (this.month === 11) {
                        this.month = 0;
                        this.year++;
                    } else {
                        this.month++;
                    }
                } else {
                    if (this.month === 0) {
                        this.month = 11;
                        this.year--;
                    } else {
                        this.month--;
                    }
                }
                this._clearCalendarLayout();
                this._initCalendarLayout('day', 'day--bingo', 'day--weekend');
            }
        }, {
            key: '_addEl',
            value: function _addEl(itemKey) {
                var el = '<h3 class="item-title">Title</h3>\n                <p class="item-text">Lorem, ipsum dolor sit amet consectetur adipisicing elit. Iusto reprehenderit natus nihil veritatis voluptates, dicta iste voluptatem alias doloremque illo?</p>\n                <p class="item-date">2018-11-05</p>\n                <div class="item-btns-block">\n                    <a href="#done" class="item-btn" title="\u041E\u0442\u043C\u0435\u0442\u0438\u0442\u044C \u043A\u0430\u043A \u0432\u044B\u043F\u043E\u043B\u043D\u0435\u043D\u043D\u043E\u0435">\n                        <i class="fas fa-check-circle"></i>\n                    </a>\t\n                    <a href="#edit" class="item-btn item-btn--edit" title="\u0412\u043D\u0435\u0441\u0442\u0438 \u043F\u0440\u0430\u0432\u043A\u0438">\n                        <i class="fas fa-pencil-alt"></i>\n                    </a>\t\n                    <a href="#remove" class="item-btn item-btn--remove" title="\u0423\u0434\u0430\u043B\u0438\u0442\u044C">\n                        <i class="fas fa-trash-alt"></i>\n                    </a>\t\n                </div>\n                ';
                var item = this._localStorageRead(itemKey) || 0;
                var currentListLength = document.querySelector('.notes-list').children.length;
                if (item.length === currentListLength) return;
                if (item.length - currentListLength > 0) {
                    for (var i = currentListLength; i < currentListLength + item.length - currentListLength; i++) {
                        var newLi = document.createElement('LI');
                        newLi.classList.add('notes-item');
                        newLi.innerHTML = el;
                        newLi.querySelector('.item-title').innerHTML = item[i].title;
                        newLi.querySelector('.item-text').innerHTML = item[i].note;
                        newLi.querySelector('.item-date').innerHTML = item[i].date;
                        document.querySelector('.notes-list').appendChild(newLi);
                    }
                }
            }
        }, {
            key: '_getData',
            value: function _getData(e) {
                e.preventDefault();
                var target = e.currentTarget;
                var newNoteData = {
                    title: target.querySelector('[name="title"]').value,
                    date: target.querySelector('[name="date"]').value,
                    note: target.querySelector('[name="note"]').value
                };

                this._localStoragePush(newNoteData);

                target.querySelectorAll('[name]').forEach(function (el) {
                    el.value = '';
                });
                this.modalForInputNewNote.style.display = null;
                this.mainLayout.style.filter = null;
            }
        }, {
            key: '_itemBtnsHandler',
            value: function _itemBtnsHandler(e) {
                e.preventDefault();
                var noteItemIndex = this._findIndexElInList(e.target.closest("LI"));

                var target = e.target.closest('a.item-btn');
                if (!target) return;

                var id = target.getAttribute('href');
                switch (id) {
                    case '#done':
                        target.classList.toggle('item-btn--done');
                        target.closest('LI').classList.toggle('notes-item--complete');
                        break;
                    case '#remove':
                        this._localStorageRemove(noteItemIndex);
                        target.closest('LI').remove();
                        break;
                }
            }
        }, {
            key: '_localStoragePush',
            value: function _localStoragePush(noteData) {
                var itemsArr = localStorage.getItem(noteData.date) ? JSON.parse(localStorage.getItem(noteData.date)) : [];
                itemsArr.push(noteData);
                var itemsArrJson = JSON.stringify(itemsArr);
                localStorage.setItem(noteData.date, itemsArrJson);

                var NameFormateDate = this._formateDate();

                if (noteData.date == NameFormateDate) {
                    this._addEl(noteData.date);
                }
            }
        }, {
            key: '_localStorageRead',
            value: function _localStorageRead() {
                for (var _len = arguments.length, rest = Array(_len), _key = 0; _key < _len; _key++) {
                    rest[_key] = arguments[_key];
                }

                if (rest) {
                    var item = JSON.parse(localStorage.getItem(rest[0]));
                    return item;
                }
            }
        }, {
            key: '_localStorageRemove',
            value: function _localStorageRemove(index) {
                var date = this._formateDate();
                var itemsArr = this._localStorageRead(date);
                itemsArr.splice(index, 1);
                var itemsArrJson = JSON.stringify(itemsArr);
                localStorage.setItem(date, itemsArrJson);
            }
        }, {
            key: '_formateDate',
            value: function _formateDate() {
                var monthNameFormate = String(this.month).length === 1 ? '0' + (this.month + 1) : this.month + 1;
                var dateNameFormate = String(this.date).length === 1 ? '0' + this.date : this.date;
                return String(this.year + '-' + monthNameFormate + '-' + dateNameFormate);
            }
        }, {
            key: '_findIndexElInList',
            value: function _findIndexElInList(item) {
                var parentEl = item.parentElement.children;
                var itemsArr = [].slice.call(parentEl);
                var count = -1;
                var currentItem = item;
                while (currentItem) {
                    currentItem = currentItem.previousElementSibling;
                    count++;
                }
                return count;
            }
        }]);

        return Calendar;
    }();

    var newCalendar = new Calendar();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
