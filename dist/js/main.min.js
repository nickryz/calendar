(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// import "babel-polyfill";
window.addEventListener('DOMContentLoaded', init);

// import $ from 'jquery';

function init() {
    var Calendar = function () {
        function Calendar() {
            _classCallCheck(this, Calendar);

            // helpers variable
            this.year = new Date().getFullYear();
            this.month = new Date().getMonth();
            this.weekDays = ['ПН', 'ВТ', 'СР', 'ЧТ', 'ПТ', 'СБ', 'ВС'];

            // DOM
            this.calendarWrap = document.querySelector('.calendar-layout');
            this.calendarWeekDays = document.querySelector('.calendar-days');
            this.btnsMonth = document.querySelectorAll('.btn');
            this.monthName = document.querySelector('.month-name');
            this.yearName = document.querySelector('.year-name');
            this.btnAddNewNote = document.querySelector('.addNoteBtn');

            // modal For Input NewNote
            this.modalForInputNewNote = document.querySelector('.modal-newNote');
            this.modalClose = document.querySelector('.cancel');

            this._initCalendarLayout('day', 'day--bingo');
            this._initComponents(this.calendarWeekDays, 'dayWeek');
            this._events();
        }

        _createClass(Calendar, [{
            key: '_events',
            value: function _events() {
                var _this = this;

                this.btnsMonth.forEach(function (el) {
                    el.addEventListener('click', _this._monthLayoutChange.bind(_this));
                });

                // modal For Input NewNote
                this.btnAddNewNote.addEventListener('click', function (e) {
                    return _this.modalForInputNewNote.style.display = 'block';
                });
                this.modalForInputNewNote.querySelector('form').addEventListener('submit', this._getData.bind(this));
                this.modalClose.addEventListener('click', function () {
                    return _this.modalForInputNewNote.style.display = null;
                });
            }
        }, {
            key: '_initCalendarLayout',
            value: function _initCalendarLayout(dayClass, dayActiveClass) {
                var d = new Date(this.year, this.month);
                var daysInMonth = this._daysInMonth(this.year, this.month);
                var firstDayInMonth = d.getDay();

                for (var i = 0; i < daysInMonth; i++) {
                    var dayElem = document.createElement('LI');
                    dayElem.classList.add(dayClass);
                    dayElem.classList.add(dayActiveClass);
                    dayElem.innerHTML = i + 1;
                    if (i === 1) {}
                    this.calendarWrap.appendChild(dayElem);
                }
                this.calendarWrap.firstChild.style.marginLeft = firstDayInMonth !== 0 ? 100 / 7 * (firstDayInMonth - 1) + '%' : 100 / 7 * 6 + '%';
                this.monthName.innerHTML = d.toLocaleString('ru', { month: "long" });
                this.yearName.innerHTML = d.getFullYear();
            }
        }, {
            key: '_clearCalendarLayout',
            value: function _clearCalendarLayout() {
                while (this.calendarWrap.firstChild) {
                    this.calendarWrap.removeChild(this.calendarWrap.firstChild);
                }
            }
        }, {
            key: '_initComponents',
            value: function _initComponents(weekDays, weekDaysClass) {
                this.weekDays.forEach(function (el) {
                    var day = document.createElement('LI');
                    day.innerHTML = el;
                    day.classList.add(weekDaysClass);
                    weekDays.appendChild(day);
                });
            }
        }, {
            key: '_daysInMonth',
            value: function _daysInMonth(year, month) {
                return new Date(year, month + 1, 0).getDate();
            }
        }, {
            key: '_monthLayoutChange',
            value: function _monthLayoutChange(e) {
                var target = e.target;
                var id = target.id;
                if (id === 'nextMonth') {
                    if (this.month === 11) {
                        this.month = 0;
                        this.year++;
                    } else {
                        this.month++;
                    }
                } else {
                    if (this.month === 0) {
                        this.month = 11;
                        this.year--;
                    } else {
                        this.month--;
                    }
                }
                this._clearCalendarLayout();
                this._initCalendarLayout('day', 'day--bingo', 'day--weekend');
            }
        }, {
            key: '_addEl',
            value: function _addEl(newNoteData) {
                var _this2 = this;

                //   let noteData = this._getData();
                var el = '<h3 class="item-title">Title</h3>\n                <p class="item-text">Lorem, ipsum dolor sit amet consectetur adipisicing elit. Iusto reprehenderit natus nihil veritatis voluptates, dicta iste voluptatem alias doloremque illo?</p>\n                <p class="item-date">2018-11-05</p>\n                <div class="item-btns-block">\n                    <a href="#done" class="item-btn" title="\u041E\u0442\u043C\u0435\u0442\u0438\u0442\u044C \u043A\u0430\u043A \u0432\u044B\u043F\u043E\u043B\u043D\u0435\u043D\u043D\u043E\u0435">\n                        <i class="fas fa-check-circle"></i>\n                    </a>\t\n                    <a href="#edit" class="item-btn item-btn--edit" title="\u0412\u043D\u0435\u0441\u0442\u0438 \u043F\u0440\u0430\u0432\u043A\u0438">\n                        <i class="fas fa-pencil-alt"></i>\n                    </a>\t\n                    <a href="#remove" class="item-btn item-btn--remove" title="\u0423\u0434\u0430\u043B\u0438\u0442\u044C">\n                        <i class="fas fa-trash-alt"></i>\n                    </a>\t\n                </div>\n                ';
                var newLi = document.createElement('LI');
                newLi.classList.add('notes-item');
                newLi.innerHTML = el;
                newLi.querySelector('.item-title').innerHTML = newNoteData.title;
                newLi.querySelector('.item-text').innerHTML = newNoteData.note;
                newLi.querySelector('.item-date').innerHTML = newNoteData.date;
                document.querySelector('.notes-list').appendChild(newLi);
                document.querySelectorAll('.item-btn').forEach(function (el) {
                    el.addEventListener('click', _this2._itemBtnsHandler.bind(_this2));
                });
            }
        }, {
            key: '_getData',
            value: function _getData(e) {
                e.preventDefault();
                var target = e.currentTarget;
                var newNoteData = {
                    title: target.querySelector('[name="title"]').value,
                    date: target.querySelector('[name="date"]').value,
                    note: target.querySelector('[name="note"]').value
                };

                this._localStorage(newNoteData);

                target.querySelectorAll('[name]').forEach(function (el) {
                    el.value = '';
                });
                this.modalForInputNewNote.style.display = null;

                this._addEl(newNoteData);
            }
        }, {
            key: '_itemBtnsHandler',
            value: function _itemBtnsHandler(e) {
                e.preventDefault();
                var target = e.currentTarget;
                var id = target.getAttribute('href');
                switch (id) {
                    case '#done':
                        target.classList.toggle('item-btn--done');
                        target.closest('LI').classList.toggle('notes-item--complete');
                        break;
                    case '#remove':
                        target.closest('LI').remove();
                        break;
                    default:
                        break;
                }
            }
        }, {
            key: '_localStorage',
            value: function _localStorage() {
                for (var _len = arguments.length, rest = Array(_len), _key = 0; _key < _len; _key++) {
                    rest[_key] = arguments[_key];
                }

                if (rest.length) {
                    var itemsArr = localStorage.getItem(rest[0].date) ? JSON.parse(localStorage.getItem(rest[0].date)) : [];
                    itemsArr.push(rest[0]);
                    var itemsArrJson = JSON.stringify(itemsArr);
                    localStorage.setItem(rest[0].date, itemsArrJson);
                }
            }
        }]);

        return Calendar;
    }();

    var newCalendar = new Calendar();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
